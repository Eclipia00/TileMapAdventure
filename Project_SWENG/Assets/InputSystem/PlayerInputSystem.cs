//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/PlayerInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSystem"",
    ""maps"": [
        {
            ""name"": ""BaseInput"",
            ""id"": ""30af8f61-2c60-48b4-ac7b-b25b86f0cc00"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3460db20-dfc2-4cf8-9cbd-4c5bb1472cde"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DiceRolling"",
                    ""type"": ""Button"",
                    ""id"": ""0e7c1453-7ac1-401b-ad96-7245c350e58a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionShift"",
                    ""type"": ""Button"",
                    ""id"": ""88b2cdb4-db74-458d-be4a-c4bafe7158bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""35b5e36b-3ab1-48ad-8745-3a9995b5a2f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ItemPickup"",
                    ""type"": ""Button"",
                    ""id"": ""bc668a9c-9181-4f28-b39f-15f896b7e12b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""214d20e3-59ec-4e29-81ba-b8e2e550737b"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""24236e06-680d-4098-9a4f-16ca02d75f78"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e3c6b44f-0f30-4de9-b2f8-369c444afbab"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a7da3b28-545e-4715-b985-2f8d78a60dc2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""42e56fc2-99e2-434a-9a78-570f416d241c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6d60045a-498c-4c77-b8d0-dccbd216b041"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DiceRolling"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""094e61fb-5ad9-46f0-b53e-dcdd2d910476"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17e62fed-2c00-441e-9c62-c60ad99709ec"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemPickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9cdf5b7a-7bf0-4a01-86e9-11af02ef770b"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionShift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""KeyInput"",
            ""id"": ""8a341fc3-8aaa-4a30-a564-c536726ab39a"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""ba14e473-5d72-436b-a502-f170a510cbd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionQ"",
                    ""type"": ""Button"",
                    ""id"": ""408df2a6-53fb-4fa7-a243-b6b9329100ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionE"",
                    ""type"": ""Button"",
                    ""id"": ""65037ff2-eb5f-43ee-b15a-0b0dc6f9bd32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionC"",
                    ""type"": ""Button"",
                    ""id"": ""8c016a20-22cd-4cbb-86be-9aeeb265b392"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionV"",
                    ""type"": ""Button"",
                    ""id"": ""d7dcf821-c660-43ab-abb3-3296aeb390b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action1"",
                    ""type"": ""Button"",
                    ""id"": ""08a75941-9cd0-4f6c-9123-42a2d0ac2314"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action2"",
                    ""type"": ""Button"",
                    ""id"": ""d7260607-6b93-43dd-a037-b4bbb7b2b601"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action3"",
                    ""type"": ""Button"",
                    ""id"": ""0db0774b-c22c-4cbb-96a2-cf15df6ad4d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action4"",
                    ""type"": ""Button"",
                    ""id"": ""acd0c08b-411c-48e2-a453-842516c61446"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""601cbf2d-15a9-4f59-aa83-8d328a8bf45e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""269815a5-7175-4b1a-a608-5f5872fc966e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionQ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80a40aae-ea0f-4795-bd4e-621210c2f53a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b7438b7-904a-4fc9-974f-60cc44a2664f"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74254e7f-dbc8-4663-96a0-e5fbb777683a"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9aeb3749-a35a-431a-9287-59f1d3982d7b"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d204f75-91af-47d0-b08b-eafc5363e9fb"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd2e9431-981d-4ae1-867b-b1fe44dc0fdc"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e775926-1868-4edb-b294-019563588780"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MouseInput"",
            ""id"": ""ebbd6dba-25bc-43f0-8629-6e0f88146953"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""e6f68a74-466c-4ebc-a7e3-d35001939cd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""7d4e0b68-42d5-418e-b6f8-81e5fc73656e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseLClick"",
                    ""type"": ""Button"",
                    ""id"": ""80b912e8-5379-452b-80d9-5344861daa56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRClick"",
                    ""type"": ""Button"",
                    ""id"": ""b89c793c-13f8-4eee-9680-222c61b4abed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6712120b-9b41-4609-befa-152fe1173ce1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6b8cd3c1-a908-4e80-855a-6c8a433387ad"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0dfa9b65-4687-47db-ad61-5a8f2e879d2e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62a26833-4a76-4671-96a0-f412757dabb1"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2feadbd0-e247-4e37-8d31-e9d58f279cce"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""092200fe-749e-4765-8a81-26032a41b9c4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e388da9e-edc9-48b6-8c38-d50b3ac8d348"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5dd161e1-3637-433b-9786-de94347c534e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BaseInput
        m_BaseInput = asset.FindActionMap("BaseInput", throwIfNotFound: true);
        m_BaseInput_Movement = m_BaseInput.FindAction("Movement", throwIfNotFound: true);
        m_BaseInput_DiceRolling = m_BaseInput.FindAction("DiceRolling", throwIfNotFound: true);
        m_BaseInput_ActionShift = m_BaseInput.FindAction("ActionShift", throwIfNotFound: true);
        m_BaseInput_Select = m_BaseInput.FindAction("Select", throwIfNotFound: true);
        m_BaseInput_ItemPickup = m_BaseInput.FindAction("ItemPickup", throwIfNotFound: true);
        // KeyInput
        m_KeyInput = asset.FindActionMap("KeyInput", throwIfNotFound: true);
        m_KeyInput_Newaction = m_KeyInput.FindAction("New action", throwIfNotFound: true);
        m_KeyInput_ActionQ = m_KeyInput.FindAction("ActionQ", throwIfNotFound: true);
        m_KeyInput_ActionE = m_KeyInput.FindAction("ActionE", throwIfNotFound: true);
        m_KeyInput_ActionC = m_KeyInput.FindAction("ActionC", throwIfNotFound: true);
        m_KeyInput_ActionV = m_KeyInput.FindAction("ActionV", throwIfNotFound: true);
        m_KeyInput_Action1 = m_KeyInput.FindAction("Action1", throwIfNotFound: true);
        m_KeyInput_Action2 = m_KeyInput.FindAction("Action2", throwIfNotFound: true);
        m_KeyInput_Action3 = m_KeyInput.FindAction("Action3", throwIfNotFound: true);
        m_KeyInput_Action4 = m_KeyInput.FindAction("Action4", throwIfNotFound: true);
        // MouseInput
        m_MouseInput = asset.FindActionMap("MouseInput", throwIfNotFound: true);
        m_MouseInput_Newaction = m_MouseInput.FindAction("New action", throwIfNotFound: true);
        m_MouseInput_PointerPosition = m_MouseInput.FindAction("PointerPosition", throwIfNotFound: true);
        m_MouseInput_MouseLClick = m_MouseInput.FindAction("MouseLClick", throwIfNotFound: true);
        m_MouseInput_MouseRClick = m_MouseInput.FindAction("MouseRClick", throwIfNotFound: true);
        m_MouseInput_MouseScroll = m_MouseInput.FindAction("MouseScroll", throwIfNotFound: true);
        m_MouseInput_MouseDelta = m_MouseInput.FindAction("MouseDelta", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseInput
    private readonly InputActionMap m_BaseInput;
    private List<IBaseInputActions> m_BaseInputActionsCallbackInterfaces = new List<IBaseInputActions>();
    private readonly InputAction m_BaseInput_Movement;
    private readonly InputAction m_BaseInput_DiceRolling;
    private readonly InputAction m_BaseInput_ActionShift;
    private readonly InputAction m_BaseInput_Select;
    private readonly InputAction m_BaseInput_ItemPickup;
    public struct BaseInputActions
    {
        private @PlayerInputSystem m_Wrapper;
        public BaseInputActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_BaseInput_Movement;
        public InputAction @DiceRolling => m_Wrapper.m_BaseInput_DiceRolling;
        public InputAction @ActionShift => m_Wrapper.m_BaseInput_ActionShift;
        public InputAction @Select => m_Wrapper.m_BaseInput_Select;
        public InputAction @ItemPickup => m_Wrapper.m_BaseInput_ItemPickup;
        public InputActionMap Get() { return m_Wrapper.m_BaseInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseInputActions set) { return set.Get(); }
        public void AddCallbacks(IBaseInputActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseInputActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @DiceRolling.started += instance.OnDiceRolling;
            @DiceRolling.performed += instance.OnDiceRolling;
            @DiceRolling.canceled += instance.OnDiceRolling;
            @ActionShift.started += instance.OnActionShift;
            @ActionShift.performed += instance.OnActionShift;
            @ActionShift.canceled += instance.OnActionShift;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @ItemPickup.started += instance.OnItemPickup;
            @ItemPickup.performed += instance.OnItemPickup;
            @ItemPickup.canceled += instance.OnItemPickup;
        }

        private void UnregisterCallbacks(IBaseInputActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @DiceRolling.started -= instance.OnDiceRolling;
            @DiceRolling.performed -= instance.OnDiceRolling;
            @DiceRolling.canceled -= instance.OnDiceRolling;
            @ActionShift.started -= instance.OnActionShift;
            @ActionShift.performed -= instance.OnActionShift;
            @ActionShift.canceled -= instance.OnActionShift;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @ItemPickup.started -= instance.OnItemPickup;
            @ItemPickup.performed -= instance.OnItemPickup;
            @ItemPickup.canceled -= instance.OnItemPickup;
        }

        public void RemoveCallbacks(IBaseInputActions instance)
        {
            if (m_Wrapper.m_BaseInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseInputActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseInputActions @BaseInput => new BaseInputActions(this);

    // KeyInput
    private readonly InputActionMap m_KeyInput;
    private List<IKeyInputActions> m_KeyInputActionsCallbackInterfaces = new List<IKeyInputActions>();
    private readonly InputAction m_KeyInput_Newaction;
    private readonly InputAction m_KeyInput_ActionQ;
    private readonly InputAction m_KeyInput_ActionE;
    private readonly InputAction m_KeyInput_ActionC;
    private readonly InputAction m_KeyInput_ActionV;
    private readonly InputAction m_KeyInput_Action1;
    private readonly InputAction m_KeyInput_Action2;
    private readonly InputAction m_KeyInput_Action3;
    private readonly InputAction m_KeyInput_Action4;
    public struct KeyInputActions
    {
        private @PlayerInputSystem m_Wrapper;
        public KeyInputActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_KeyInput_Newaction;
        public InputAction @ActionQ => m_Wrapper.m_KeyInput_ActionQ;
        public InputAction @ActionE => m_Wrapper.m_KeyInput_ActionE;
        public InputAction @ActionC => m_Wrapper.m_KeyInput_ActionC;
        public InputAction @ActionV => m_Wrapper.m_KeyInput_ActionV;
        public InputAction @Action1 => m_Wrapper.m_KeyInput_Action1;
        public InputAction @Action2 => m_Wrapper.m_KeyInput_Action2;
        public InputAction @Action3 => m_Wrapper.m_KeyInput_Action3;
        public InputAction @Action4 => m_Wrapper.m_KeyInput_Action4;
        public InputActionMap Get() { return m_Wrapper.m_KeyInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyInputActions set) { return set.Get(); }
        public void AddCallbacks(IKeyInputActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyInputActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
            @ActionQ.started += instance.OnActionQ;
            @ActionQ.performed += instance.OnActionQ;
            @ActionQ.canceled += instance.OnActionQ;
            @ActionE.started += instance.OnActionE;
            @ActionE.performed += instance.OnActionE;
            @ActionE.canceled += instance.OnActionE;
            @ActionC.started += instance.OnActionC;
            @ActionC.performed += instance.OnActionC;
            @ActionC.canceled += instance.OnActionC;
            @ActionV.started += instance.OnActionV;
            @ActionV.performed += instance.OnActionV;
            @ActionV.canceled += instance.OnActionV;
            @Action1.started += instance.OnAction1;
            @Action1.performed += instance.OnAction1;
            @Action1.canceled += instance.OnAction1;
            @Action2.started += instance.OnAction2;
            @Action2.performed += instance.OnAction2;
            @Action2.canceled += instance.OnAction2;
            @Action3.started += instance.OnAction3;
            @Action3.performed += instance.OnAction3;
            @Action3.canceled += instance.OnAction3;
            @Action4.started += instance.OnAction4;
            @Action4.performed += instance.OnAction4;
            @Action4.canceled += instance.OnAction4;
        }

        private void UnregisterCallbacks(IKeyInputActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
            @ActionQ.started -= instance.OnActionQ;
            @ActionQ.performed -= instance.OnActionQ;
            @ActionQ.canceled -= instance.OnActionQ;
            @ActionE.started -= instance.OnActionE;
            @ActionE.performed -= instance.OnActionE;
            @ActionE.canceled -= instance.OnActionE;
            @ActionC.started -= instance.OnActionC;
            @ActionC.performed -= instance.OnActionC;
            @ActionC.canceled -= instance.OnActionC;
            @ActionV.started -= instance.OnActionV;
            @ActionV.performed -= instance.OnActionV;
            @ActionV.canceled -= instance.OnActionV;
            @Action1.started -= instance.OnAction1;
            @Action1.performed -= instance.OnAction1;
            @Action1.canceled -= instance.OnAction1;
            @Action2.started -= instance.OnAction2;
            @Action2.performed -= instance.OnAction2;
            @Action2.canceled -= instance.OnAction2;
            @Action3.started -= instance.OnAction3;
            @Action3.performed -= instance.OnAction3;
            @Action3.canceled -= instance.OnAction3;
            @Action4.started -= instance.OnAction4;
            @Action4.performed -= instance.OnAction4;
            @Action4.canceled -= instance.OnAction4;
        }

        public void RemoveCallbacks(IKeyInputActions instance)
        {
            if (m_Wrapper.m_KeyInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyInputActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyInputActions @KeyInput => new KeyInputActions(this);

    // MouseInput
    private readonly InputActionMap m_MouseInput;
    private List<IMouseInputActions> m_MouseInputActionsCallbackInterfaces = new List<IMouseInputActions>();
    private readonly InputAction m_MouseInput_Newaction;
    private readonly InputAction m_MouseInput_PointerPosition;
    private readonly InputAction m_MouseInput_MouseLClick;
    private readonly InputAction m_MouseInput_MouseRClick;
    private readonly InputAction m_MouseInput_MouseScroll;
    private readonly InputAction m_MouseInput_MouseDelta;
    public struct MouseInputActions
    {
        private @PlayerInputSystem m_Wrapper;
        public MouseInputActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_MouseInput_Newaction;
        public InputAction @PointerPosition => m_Wrapper.m_MouseInput_PointerPosition;
        public InputAction @MouseLClick => m_Wrapper.m_MouseInput_MouseLClick;
        public InputAction @MouseRClick => m_Wrapper.m_MouseInput_MouseRClick;
        public InputAction @MouseScroll => m_Wrapper.m_MouseInput_MouseScroll;
        public InputAction @MouseDelta => m_Wrapper.m_MouseInput_MouseDelta;
        public InputActionMap Get() { return m_Wrapper.m_MouseInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseInputActions set) { return set.Get(); }
        public void AddCallbacks(IMouseInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseInputActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
            @PointerPosition.started += instance.OnPointerPosition;
            @PointerPosition.performed += instance.OnPointerPosition;
            @PointerPosition.canceled += instance.OnPointerPosition;
            @MouseLClick.started += instance.OnMouseLClick;
            @MouseLClick.performed += instance.OnMouseLClick;
            @MouseLClick.canceled += instance.OnMouseLClick;
            @MouseRClick.started += instance.OnMouseRClick;
            @MouseRClick.performed += instance.OnMouseRClick;
            @MouseRClick.canceled += instance.OnMouseRClick;
            @MouseScroll.started += instance.OnMouseScroll;
            @MouseScroll.performed += instance.OnMouseScroll;
            @MouseScroll.canceled += instance.OnMouseScroll;
            @MouseDelta.started += instance.OnMouseDelta;
            @MouseDelta.performed += instance.OnMouseDelta;
            @MouseDelta.canceled += instance.OnMouseDelta;
        }

        private void UnregisterCallbacks(IMouseInputActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
            @PointerPosition.started -= instance.OnPointerPosition;
            @PointerPosition.performed -= instance.OnPointerPosition;
            @PointerPosition.canceled -= instance.OnPointerPosition;
            @MouseLClick.started -= instance.OnMouseLClick;
            @MouseLClick.performed -= instance.OnMouseLClick;
            @MouseLClick.canceled -= instance.OnMouseLClick;
            @MouseRClick.started -= instance.OnMouseRClick;
            @MouseRClick.performed -= instance.OnMouseRClick;
            @MouseRClick.canceled -= instance.OnMouseRClick;
            @MouseScroll.started -= instance.OnMouseScroll;
            @MouseScroll.performed -= instance.OnMouseScroll;
            @MouseScroll.canceled -= instance.OnMouseScroll;
            @MouseDelta.started -= instance.OnMouseDelta;
            @MouseDelta.performed -= instance.OnMouseDelta;
            @MouseDelta.canceled -= instance.OnMouseDelta;
        }

        public void RemoveCallbacks(IMouseInputActions instance)
        {
            if (m_Wrapper.m_MouseInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseInputActions @MouseInput => new MouseInputActions(this);
    public interface IBaseInputActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnDiceRolling(InputAction.CallbackContext context);
        void OnActionShift(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnItemPickup(InputAction.CallbackContext context);
    }
    public interface IKeyInputActions
    {
        void OnNewaction(InputAction.CallbackContext context);
        void OnActionQ(InputAction.CallbackContext context);
        void OnActionE(InputAction.CallbackContext context);
        void OnActionC(InputAction.CallbackContext context);
        void OnActionV(InputAction.CallbackContext context);
        void OnAction1(InputAction.CallbackContext context);
        void OnAction2(InputAction.CallbackContext context);
        void OnAction3(InputAction.CallbackContext context);
        void OnAction4(InputAction.CallbackContext context);
    }
    public interface IMouseInputActions
    {
        void OnNewaction(InputAction.CallbackContext context);
        void OnPointerPosition(InputAction.CallbackContext context);
        void OnMouseLClick(InputAction.CallbackContext context);
        void OnMouseRClick(InputAction.CallbackContext context);
        void OnMouseScroll(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
    }
}
